{"version":3,"sources":["webpack:///./src/components/Typography.components.js","webpack:///./src/components/Bio.js","webpack:///./src/templates/information.js"],"names":["Separator","styled","hr","rhythm","Date","small","scale","respectTopMargin","Bio","done","slug","query","bioQuery","render","data","site","siteMetadata","author","social","style","display","marginBottom","fixed","avatar","childImageSharp","alt","marginRight","minWidth","borderRadius","imgStyle","href","github","target","rel","twitter","defaultProps","InformationTemplate","information","this","props","markdownRemark","siteTitle","title","pageContext","location","frontmatter","description","summary","excerpt","dangerouslySetInnerHTML","__html","html","React","Component","informationQuery"],"mappings":"6FAAA,gGAGaA,EAAYC,IAAOC,GAAV,kFAAGD,CAAH,uBACHE,YAAO,IAGbC,EAAOH,IAAOI,MAAV,6EAAGJ,CAAH,yEACRK,aAAM,MACC,oBAAGC,iBAAH,qBAAqD,GAAKJ,aAAQ,O,kCCTlF,sEAOA,SAASK,EAAT,GAAwB,IAClBC,EACJ,OAFqB,EAARC,MAGX,IAAK,WACHD,EAAO,cACP,MACF,IAAK,eACHA,EAAO,qBACP,MACF,IAAK,UACHA,EAAO,UACP,MACF,QACEA,EAAO,UAIX,OACE,kBAAC,cAAD,CACEE,MAAOC,EACPC,OAAQ,SAACC,GAAU,IAAD,EACWA,EAAKC,KAAKC,aAA7BC,EADQ,EACRA,OAAQC,EADA,EACAA,OAEhB,OACE,2BACEC,MAAO,CACLC,QAAQ,OACRC,aAAclB,YAAO,OAGvB,kBAAC,IAAD,CACEmB,MAAOR,EAAKS,OAAOC,gBAAgBF,MACnCG,IAAKR,EACLE,MAAO,CACLO,YAAavB,YAAO,IACpBkB,aAAc,EACdM,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,2BACGnB,EADH,OACY,gCAASQ,GADrB,4JAIE,uBACEa,KAAI,sBAAwBZ,EAAOa,OACnCC,OAAO,SACPC,IAAI,gCAHN,UAMK,IAVP,KAWK,IACH,uBACEH,KAAI,uBAAyBZ,EAAOgB,QACpCF,OAAO,SACPC,IAAI,gCAHN,WAZF,SA4BZzB,EAAI2B,aAAe,CACjBzB,KAAM,IAOR,IAAME,EAAQ,YAqBCJ,O,+KCnGT4B,E,kGACJvB,OAAA,WACE,IAAMwB,EAAcC,KAAKC,MAAMzB,KAAK0B,eAC9BC,EAAYH,KAAKC,MAAMzB,KAAKC,KAAKC,aAAa0B,MAC9ChC,EAAO4B,KAAKC,MAAMI,YAAYjC,KAEpC,OACE,kBAAC,IAAD,CAAQkC,SAAUN,KAAKC,MAAMK,SAAUF,MAAOD,GAC5C,kBAAC,IAAD,CACEC,MAAOL,EAAYQ,YAAYH,MAC/BI,YAAaT,EAAYQ,YAAYE,SAAWV,EAAYW,UAE9D,4BAAKX,EAAYQ,YAAYH,OAC7B,yBAAKO,wBAAyB,CAAEC,OAAQb,EAAYc,QACpD,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKzC,KAAMA,M,GAfe0C,IAAMC,WAqBzBjB,YAER,IAAMkB,EAAgB","file":"component---src-templates-information-js-711395f5040ae0f837bb.js","sourcesContent":["import styled from 'styled-components';\nimport { rhythm, scale } from '../utils/typography';\n\nexport const Separator = styled.hr`\n  margin-bottom: ${rhythm(1)};\n`;\n\nexport const Date = styled.small`\n  ${{ ...scale(-1 / 5) }};\n  margin-top: ${({ respectTopMargin = true }) => (respectTopMargin ? '' : rhythm(-1))};\n  font-style: italic;\n  display: block;\n`;\n","import React from 'react';\nimport PT from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\n\nimport { rhythm } from '../utils/typography';\n\nfunction Bio({ slug }) {\n  let done;\n  switch (slug) {\n    case 'my-music':\n      done = 'Hand-picked';\n      break;\n    case 'built-things':\n      done = 'Created & designed';\n      break;\n    case 'contact':\n      done = 'Created';\n      break;\n    default:\n      done = 'Written';\n      break;\n  }\n\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={(data) => {\n        const { author, social } = data.site.siteMetadata;\n\n        return (\n          <aside\n            style={{\n              display: `flex`,\n              marginBottom: rhythm(2.5),\n            }}\n          >\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                marginRight: rhythm(1 / 2),\n                marginBottom: 0,\n                minWidth: 80,\n                borderRadius: `100%`,\n              }}\n              imgStyle={{\n                borderRadius: `50%`,\n              }}\n            />\n            <p>\n              {done} by <strong>{author}</strong>, a diversified developer who lives and works in Europe\n              building nice things. On this blog I post not only programming stuff. You can also find me on\n              {` `}\n              <a\n                href={`https://github.com/${social.github}`}\n                target=\"_blank\"\n                rel=\"nofollow noopener noreferrer\"\n              >\n                GitHub\n              </a>{' '}\n              or{' '}\n              <a\n                href={`https://twitter.com/${social.twitter}`}\n                target=\"_blank\"\n                rel=\"nofollow noopener noreferrer\"\n              >\n                Twitter\n              </a>\n              .\n            </p>\n          </aside>\n        );\n      }}\n    />\n  );\n}\n\nBio.defaultProps = {\n  slug: '',\n};\n\nBio.propTypes = {\n  slug: PT.string,\n};\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 80, height: 80) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          github\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nexport default Bio;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport { Separator } from '../components/Typography.components';\n\nclass InformationTemplate extends React.Component {\n  render() {\n    const information = this.props.data.markdownRemark;\n    const siteTitle = this.props.data.site.siteMetadata.title;\n    const slug = this.props.pageContext.slug;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={information.frontmatter.title}\n          description={information.frontmatter.summary || information.excerpt}\n        />\n        <h1>{information.frontmatter.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: information.html }} />\n        <Separator />\n        <Bio slug={slug} />\n      </Layout>\n    );\n  }\n}\n\nexport default InformationTemplate;\n\nexport const informationQuery = graphql`\n  query InformationBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 300)\n      frontmatter {\n        title\n        summary\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}