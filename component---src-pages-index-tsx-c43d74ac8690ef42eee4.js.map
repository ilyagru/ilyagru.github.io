{"version":3,"file":"component---src-pages-index-tsx-c43d74ac8690ef42eee4.js","mappings":"6JAkFA,IAAMA,EAAQ,YAmBd,IA3FA,YAAoC,IAC9BC,EAD6B,IAApBC,KAGb,YAHiC,MAAb,GAAa,GAI/B,IAAK,WACHD,EAAO,cACP,MACF,IAAK,eACHA,EAAO,qBACP,MACF,IAAK,UACHA,EAAO,UACP,MACF,QACEA,EAAO,UAIX,OACE,gBAAC,EAAAE,YAAD,CACEC,MAAOJ,EACPK,OAAQ,SAACC,GACP,MAA2BA,EAAKC,KAAKC,aAA7BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAEhB,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,cAAcC,EAAAA,EAAAA,IAAO,OAGvB,gBAAC,EAAAC,EAAD,CACEC,MAAOV,EAAKW,OAAOC,gBAAgBC,gBACnCC,IAAKX,EACLE,MAAO,CACLU,aAAaP,EAAAA,EAAAA,IAAO,IACpBD,aAAc,EACdS,SAAU,GACVC,aAAc,QAEhBC,SAAU,CACRD,aAAc,SAGlB,yBACGtB,EADH,OACY,8BAASQ,GADrB,oMAG6C,IAC3C,qBACEgB,KAAI,sBAAwBf,EAAOgB,OACnCC,OAAO,SACPC,IAAI,gCAHN,UAMK,IAVP,KAWK,IACH,qBACEH,KAAI,uBAAyBf,EAAOmB,QACpCF,OAAO,SACPC,IAAI,gCAHN,WAZF,W,iGCnDCE,EAAYC,EAAAA,QAAAA,GAAAA,WAAH,2EAAGA,CAAH,wBACHjB,EAAAA,EAAAA,IAAO,IAObkB,EAAWD,EAAAA,QAAAA,MAAAA,WAAH,0EAAGA,CAAH,0EACZE,EAAAA,EAAAA,KAAM,MACC,oBAAGC,iBAAH,qBAAqD,IAAKpB,EAAAA,EAAAA,KAAQ,O,sGCqClF,UArCA,YAA+C,IAA1BR,EAAyB,EAAzBA,KAAM6B,EAAmB,EAAnBA,SACzB,OACE,gBAAC,IAAD,CAAQA,SAAUA,EAAUC,MAAO9B,EAAKC,KAAKC,aAAa4B,OACxD,gBAAC,IAAD,CACEA,MAAM,YACNC,SAAU,CACR,OACA,WACA,aACA,QACA,QACA,MACA,OACA,cACA,YAGJ,gBAAC,IAAD,MACC/B,EAAKgC,kBAAkBC,MAAMC,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,KAC7BL,EAAQK,EAAKC,YAAYN,OAASK,EAAKE,OAAOzC,KAEpD,OACE,2BAAS0C,IAAKH,EAAKE,OAAOzC,MACxB,sBAAIS,MAAO,CAAEE,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KACpC,gBAAC,EAAA+B,KAAD,CAAMlC,MAAO,CAAEmC,UAAW,QAAUC,GAAE,IAAMN,EAAKE,OAAOzC,MACrDkC,IAGL,gBAAC,IAAD,KAAWK,EAAKC,YAAYM,MAC5B,qBAAGC,wBAAyB,CAAEC,OAAQT,EAAKC,YAAYS,SAAWV,EAAKW","sources":["webpack://gruzhevstasy/./src/components/Bio.tsx","webpack://gruzhevstasy/./src/components/Typography.components.ts","webpack://gruzhevstasy/./src/pages/index.tsx"],"sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\n\nimport { rhythm } from '../utils/typography';\n\ntype Props = {\n  slug?: string;\n};\n\nfunction Bio({ slug = '' }: Props) {\n  let done: string;\n\n  switch (slug) {\n    case 'my-music':\n      done = 'Hand-picked';\n      break;\n    case 'built-things':\n      done = 'Created & designed';\n      break;\n    case 'contact':\n      done = 'Created';\n      break;\n    default:\n      done = 'Written';\n      break;\n  }\n\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={(data) => {\n        const { author, social } = data.site.siteMetadata;\n\n        return (\n          <aside\n            style={{\n              display: 'flex',\n              marginBottom: rhythm(2.5),\n            }}\n          >\n            <GatsbyImage\n              image={data.avatar.childImageSharp.gatsbyImageData}\n              alt={author}\n              style={{\n                marginRight: rhythm(1 / 2),\n                marginBottom: 0,\n                minWidth: 80,\n                borderRadius: '100%',\n              }}\n              imgStyle={{\n                borderRadius: '50%',\n              }}\n            />\n            <p>\n              {done} by <strong>{author}</strong>, a senior developer with diversified experience in different\n              domains who lives and works in Europe building nice things. On this blog I post not only\n              programming stuff. You can also find me on{' '}\n              <a\n                href={`https://github.com/${social.github}`}\n                target=\"_blank\"\n                rel=\"nofollow noopener noreferrer\"\n              >\n                GitHub\n              </a>{' '}\n              or{' '}\n              <a\n                href={`https://twitter.com/${social.twitter}`}\n                target=\"_blank\"\n                rel=\"nofollow noopener noreferrer\"\n              >\n                Twitter\n              </a>\n              .\n            </p>\n          </aside>\n        );\n      }}\n    />\n  );\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 80, height: 80, layout: FIXED)\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          github\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nexport default Bio;\n","import styled from 'styled-components';\nimport { rhythm, scale } from '../utils/typography';\n\nexport const Separator = styled.hr`\n  margin-bottom: ${rhythm(1)};\n`;\n\ntype DateTextProps = {\n  respectTopMargin?: boolean;\n};\n\nexport const DateText = styled.small<DateTextProps>`\n  ${{ ...scale(-1 / 5) }};\n  margin-top: ${({ respectTopMargin = true }) => (respectTopMargin ? '' : rhythm(-1))};\n  font-style: italic;\n  display: block;\n`;\n","import React from 'react';\nimport { Link, graphql, PageProps } from 'gatsby';\n\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport { DateText } from '../components/Typography.components';\nimport { rhythm } from '../utils/typography';\n\ntype Props = PageProps & {\n  data: any;\n};\n\nfunction BlogIndex({ data, location }: Props) {\n  return (\n    <Layout location={location} title={data.site.siteMetadata.title}>\n      <SEO\n        title=\"All posts\"\n        keywords={[\n          'blog',\n          'frontend',\n          'javascript',\n          'react',\n          'swift',\n          'ios',\n          'life',\n          'development',\n          'design',\n        ]}\n      />\n      <Bio />\n      {data.allMarkdownRemark.edges.map(({ node }: any) => {\n        const title = node.frontmatter.title || node.fields.slug;\n\n        return (\n          <article key={node.fields.slug}>\n            <h3 style={{ marginBottom: rhythm(1 / 4) }}>\n              <Link style={{ boxShadow: 'none' }} to={`/${node.fields.slug}`}>\n                {title}\n              </Link>\n            </h3>\n            <DateText>{node.frontmatter.date}</DateText>\n            <p dangerouslySetInnerHTML={{ __html: node.frontmatter.summary || node.excerpt }} />\n          </article>\n        );\n      })}\n    </Layout>\n  );\n}\n\nexport default BlogIndex;\n\nexport const indexQuery = graphql`\n  query IndexQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { source: { eq: \"blog\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["bioQuery","done","slug","StaticQuery","query","render","data","site","siteMetadata","author","social","style","display","marginBottom","rhythm","G","image","avatar","childImageSharp","gatsbyImageData","alt","marginRight","minWidth","borderRadius","imgStyle","href","github","target","rel","twitter","Separator","styled","DateText","scale","respectTopMargin","location","title","keywords","allMarkdownRemark","edges","map","node","frontmatter","fields","key","Link","boxShadow","to","date","dangerouslySetInnerHTML","__html","summary","excerpt"],"sourceRoot":""}